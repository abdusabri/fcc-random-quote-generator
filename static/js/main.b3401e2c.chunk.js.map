{"version":3,"sources":["components/quote-card.js","components/quote-card-styles.js","api/quotes-api.js","components/quote-container.js","app.js","serviceWorker.js","index.js"],"names":["withStyles","theme","card","width","minHeight","progress","marginLeft","spacing","unit","root","Object","objectSpread","mixins","gutters","paddingTop","paddingBottom","backgroundColor","_ref","quoteText","quoteAuthor","classes","isLoading","onGenerateQuote","isError","react_default","a","createElement","Card_default","className","CardHeader_default","subheader","style","display","justifyItems","justifyContent","Button_default","id","variant","color","disabled","onClick","CircularProgress_default","Divider_default","CardContent_default","Paper_default","elevation","Fragment","index_es","marginTop","CardActions_default","href","concat","target","IconButton_default","aria-label","getQuote","asyncToGenerator","regenerator_default","mark","_callee","res","data","wrap","_context","prev","next","fetch","sent","json","abrupt","quote","author","t0","stop","this","apply","arguments","QuoteContainer","state","generateQuote","_this","setState","quote_card","Component","App","quote_container","Boolean","window","location","hostname","match","ReactDOM","render","src_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3401e2c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Twitter } from 'mdi-material-ui';\r\nimport { FormatQuoteOpen } from 'mdi-material-ui';\r\nimport { FormatQuoteClose } from 'mdi-material-ui';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { quoteCardStyles } from './quote-card-styles';\r\n\r\nconst QuoteCard = ({ quoteText, quoteAuthor, classes, isLoading, onGenerateQuote , isError}) => {\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardHeader\r\n                subheader={\r\n                    <div style={{display: 'flex', justifyItems: 'left', justifyContent: 'left'}}>\r\n                        <Button id=\"new-quote\" variant=\"outlined\" color=\"primary\"\r\n                            disabled={isLoading} onClick={onGenerateQuote} >\r\n                            Generate Quote\r\n                        </Button>\r\n                        {isLoading && <CircularProgress className={classes.progress} />}\r\n                    </div>\r\n                } />\r\n            <Divider/>\r\n            <CardContent>\r\n                {isError && \r\n                    <Paper className={classes.root} elevation={1}>\r\n                        <span>\r\n                            Oops! Something is not right!\r\n                        </span>\r\n                    </Paper>\r\n                }\r\n                {!isError &&\r\n                    <React.Fragment>\r\n                        {quoteText && <FormatQuoteOpen />}\r\n                        <span id=\"text\">\r\n                            {quoteText}\r\n                        </span>\r\n                        {quoteText && <FormatQuoteClose />}\r\n                        <br/>\r\n                        <span id=\"author\" style={{marginTop: '1em', display: 'block'}}>\r\n                            {quoteAuthor}\r\n                        </span>\r\n                    </React.Fragment>\r\n                }\r\n            </CardContent>\r\n            <Divider />\r\n            <CardActions>\r\n                <a id=\"tweet-quote\"\r\n                    href={`https://twitter.com/intent/tweet?text=\"${quoteText}\" by ${quoteAuthor}`}\r\n                    target=\"blank\">\r\n                    <IconButton aria-label=\"Tweet Quote\">\r\n                        <Twitter />\r\n                    </IconButton>\r\n                </a>\r\n            </CardActions>\r\n        </Card>\r\n        \r\n    );\r\n}\r\n\r\nQuoteCard.propTypes = {\r\n    quoteText: PropTypes.string.isRequired,\r\n    quoteAuthor: PropTypes.string.isRequired,\r\n    isLoading: PropTypes.bool.isRequired,\r\n    onGenerateQuote: PropTypes.func.isRequired,\r\n    classes: PropTypes.object.isRequired,\r\n    isError: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default withStyles(quoteCardStyles)(QuoteCard);","export const quoteCardStyles = theme => ({\r\n    card: {\r\n        width: 600,\r\n        minHeight: 200\r\n    },\r\n    progress: {\r\n        marginLeft: theme.spacing.unit * 2,\r\n    },\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        backgroundColor: '#ffc200'\r\n    }\r\n  });","export const getQuote = async function() {\r\n    try {\r\n        const res = await fetch(\"https://talaikis.com/api/quotes/random/\");\r\n        const data = await res.json();\r\n        return {\r\n            quoteText: data.quote,\r\n            quoteAuthor: data.author\r\n        }\r\n    } catch (error) {\r\n        return \"error\";\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport QuoteCard from './quote-card';\r\nimport { getQuote } from '../api/quotes-api';\r\n\r\nclass QuoteContainer extends Component {\r\n    state = {\r\n        quoteText: '',\r\n        quoteAuthor: '',\r\n        isLoading: true,\r\n        isError: false\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.generateQuote();\r\n    }\r\n\r\n    generateQuote = async () => {\r\n        this.setState({ isLoading: true });\r\n\r\n        const data = await getQuote();\r\n        if (data !== \"error\") {\r\n            this.setState({ \r\n                quoteText: data.quoteText,\r\n                quoteAuthor: data.quoteAuthor,\r\n                isError: false\r\n            });\r\n        } else {\r\n            this.setState({ \r\n                quoteText: '',\r\n                quoteAuthor: '',\r\n                isError: true\r\n            });\r\n        }\r\n\r\n        this.setState({ isLoading: false });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <QuoteCard quoteText={this.state.quoteText}\r\n                quoteAuthor={this.state.quoteAuthor}\r\n                isLoading={this.state.isLoading}\r\n                onGenerateQuote={this.generateQuote}\r\n                isError={this.state.isError}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuoteContainer;","import React, { Component } from 'react';\r\nimport QuoteContainer from './components/quote-container';\r\nimport './app.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <div id=\"quote-box\">\r\n          <QuoteContainer />\r\n        </div>\r\n      </div> \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}